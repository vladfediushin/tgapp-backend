#!/usr/bin/env python3
"""
–§–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç FSRS
"""
import json
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
sys.path.append('/Users/vladfediushin/MEGA/coding/tgapp_driving_final_v3/backend')

def test_end_to_end_fsrs():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏ FSRS: Frontend ‚Üí API ‚Üí Backend ‚Üí Database"""
    print("üîÑ –¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ FSRS\n")
    
    # 1. –°–∏–º—É–ª–∏—Ä—É–µ–º frontend –¥–∞–Ω–Ω—ã–µ
    print("üì± Frontend: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    
    frontend_answer = {
        "question_id": 42,
        "is_correct": True,
        "timestamp": 1642694400000,  # 2022-01-20 12:00:00 UTC
        "response_time": 4200,       # 4.2 —Å–µ–∫—É–Ω–¥—ã
        "difficulty_rating": 3       # Good (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª "–ù–æ—Ä–º–∞–ª—å–Ω–æ")
    }
    
    print(f"   ‚úÖ –û—Ç–≤–µ—Ç: –í–æ–ø—Ä–æ—Å {frontend_answer['question_id']}")
    print(f"   ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å: {frontend_answer['is_correct']}")
    print(f"   ‚úÖ –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {frontend_answer['response_time']}ms")
    print(f"   ‚úÖ –°–ª–æ–∂–Ω–æ—Å—Ç—å: {frontend_answer['difficulty_rating']}")
    
    # 2. –§–æ—Ä–º–∏—Ä—É–µ–º API –∑–∞–ø—Ä–æ—Å
    print("\nüåê API: –§–æ—Ä–º–∏—Ä—É–µ–º batch –∑–∞–ø—Ä–æ—Å...")
    
    try:
        from app.schemas import BatchAnswersSubmit, BatchAnswerItem
        
        api_request = BatchAnswersSubmit(
            answers=[
                BatchAnswerItem(**frontend_answer)
            ]
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º FSRS —Ñ–ª–∞–≥
        fsrs_request = {
            "answers": [frontend_answer],
            "use_fsrs": True
        }
        
        print(f"   ‚úÖ Batch –∑–∞–ø—Ä–æ—Å –≤–∞–ª–∏–¥–µ–Ω")
        print(f"   ‚úÖ FSRS –≤–∫–ª—é—á–µ–Ω: {fsrs_request['use_fsrs']}")
        print(f"   ‚úÖ JSON –∑–∞–ø—Ä–æ—Å:")
        print(f"      {json.dumps(fsrs_request, indent=6)}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {e}")
        return False
    
    # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º backend –æ–±—Ä–∞–±–æ—Ç–∫—É
    print("\n‚öôÔ∏è  Backend: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º FSRS –¥–∞–Ω–Ω—ã–µ...")
    
    try:
        # –°–∏–º—É–ª–∏—Ä—É–µ–º FSRS –∞–ª–≥–æ—Ä–∏—Ç–º
        fsrs_result = simulate_fsrs_processing(frontend_answer)
        print(f"   ‚úÖ FSRS –æ–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞")
        print(f"   ‚úÖ –ù–æ–≤–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {fsrs_result['stability']:.2f}")
        print(f"   ‚úÖ –ù–æ–≤–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {fsrs_result['difficulty']:.2f}")
        print(f"   ‚úÖ –°–ª–µ–¥—É—é—â–∏–π –ø–æ–≤—Ç–æ—Ä: —á–µ—Ä–µ–∑ {fsrs_result['interval']} –¥–Ω–µ–π")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ FSRS –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        return False
    
    # 4. –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
    print("\nüíæ Database: –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç...")
    
    try:
        db_record = {
            "user_id": "12345678-1234-1234-1234-123456789abc",
            "question_id": frontend_answer["question_id"],
            "is_correct": frontend_answer["is_correct"],
            "response_time": frontend_answer["response_time"],
            "difficulty_rating": frontend_answer["difficulty_rating"],
            # FSRS –ø–æ–ª—è
            "stability": fsrs_result["stability"],
            "difficulty": fsrs_result["difficulty"],
            "retrievability": fsrs_result["retrievability"],
            "state": fsrs_result["state"],
            "reps": fsrs_result["reps"],
            "lapses": fsrs_result["lapses"]
        }
        
        print(f"   ‚úÖ –ó–∞–ø–∏—Å—å –≥–æ—Ç–æ–≤–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        print(f"   ‚úÖ FSRS –ø–æ–ª—è –≤–∫–ª—é—á–µ–Ω—ã: {len([k for k in db_record.keys() if k in ['stability', 'difficulty', 'retrievability']])}/3")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∑–∞–ø–∏—Å–∏ –ë–î: {e}")
        return False
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüìä Statistics: –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º FSRS —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...")
    
    try:
        stats = generate_fsrs_stats([db_record])
        print(f"   ‚úÖ Retention rate: {stats['retention_rate']:.1%}")
        print(f"   ‚úÖ –°—Ä–µ–¥–Ω—è—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å: {stats['avg_difficulty']:.2f}")
        print(f"   ‚úÖ –í—Å–µ–≥–æ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π: {stats['total_reviews']}")
        
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return False
    
    print("\nüéâ –ü–æ–ª–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è FSRS —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
    return True

def simulate_fsrs_processing(answer):
    """–°–∏–º—É–ª–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É FSRS –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
    # –ë–∞–∑–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    stability = 2.5
    difficulty = 5.0
    retrievability = 0.9
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞
    if answer["is_correct"]:
        if answer["difficulty_rating"] == 4:  # Easy
            stability *= 1.3
            difficulty = max(1.0, difficulty - 0.15)
        elif answer["difficulty_rating"] == 3:  # Good
            stability *= 1.2
            difficulty = max(1.0, difficulty - 0.1)
        elif answer["difficulty_rating"] == 2:  # Hard
            stability *= 1.05
            difficulty = min(10.0, difficulty + 0.1)
        else:  # Again
            stability *= 0.8
            difficulty = min(10.0, difficulty + 0.2)
    else:
        stability *= 0.7
        difficulty = min(10.0, difficulty + 0.3)
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
    interval = max(1, int(stability))
    
    return {
        "stability": stability,
        "difficulty": difficulty,
        "retrievability": retrievability,
        "state": 2,  # Review
        "reps": 1,
        "lapses": 0 if answer["is_correct"] else 1,
        "interval": interval
    }

def generate_fsrs_stats(records):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç FSRS —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    if not records:
        return {"retention_rate": 0.0, "avg_difficulty": 0.0, "total_reviews": 0}
    
    total_correct = sum(1 for r in records if r["is_correct"])
    retention_rate = total_correct / len(records)
    
    avg_difficulty = sum(r.get("difficulty", 5.0) for r in records) / len(records)
    
    total_reviews = sum(r.get("reps", 1) for r in records)
    
    return {
        "retention_rate": retention_rate,
        "avg_difficulty": avg_difficulty,
        "total_reviews": total_reviews
    }

def test_fsrs_scenarios():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ FSRS"""
    print("\nüé≠ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è FSRS...")
    
    scenarios = [
        {
            "name": "–õ–µ–≥–∫–∏–π –≤–æ–ø—Ä–æ—Å",
            "answer": {"question_id": 1, "is_correct": True, "response_time": 1500, "difficulty_rating": 4},
            "expected": "–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏, —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"
        },
        {
            "name": "–°–ª–æ–∂–Ω—ã–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
            "answer": {"question_id": 2, "is_correct": True, "response_time": 8000, "difficulty_rating": 2},
            "expected": "–ù–µ–±–æ–ª—å—à–æ–µ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏, —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"
        },
        {
            "name": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç",
            "answer": {"question_id": 3, "is_correct": False, "response_time": 5000, "difficulty_rating": 1},
            "expected": "–£–º–µ–Ω—å—à–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏, —É–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"
        }
    ]
    
    for scenario in scenarios:
        print(f"\n   üéØ {scenario['name']}:")
        result = simulate_fsrs_processing(scenario["answer"])
        print(f"      –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å: {result['stability']:.2f}")
        print(f"      –°–ª–æ–∂–Ω–æ—Å—Ç—å: {result['difficulty']:.2f}")
        print(f"      –ò–Ω—Ç–µ—Ä–≤–∞–ª: {result['interval']} –¥–Ω–µ–π")
        print(f"      ‚úÖ {scenario['expected']}")

if __name__ == "__main__":
    print("üöÄ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ FSRS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n")
    
    success = test_end_to_end_fsrs()
    test_fsrs_scenarios()
    
    if success:
        print("\nüéä –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! FSRS –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω—É!")
    else:
        print("\n‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        sys.exit(1)
