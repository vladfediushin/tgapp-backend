#!/usr/bin/env python3
"""
–¢–µ—Å—Ç FSRS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
sys.path.append('/Users/vladfediushin/MEGA/coding/tgapp_driving_final_v3/backend')

from app.schemas import BatchAnswerItem, BatchAnswersSubmit
from pydantic import ValidationError
import json

def test_fsrs_schemas():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º FSRS —Å—Ö–µ–º—ã"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º FSRS —Å—Ö–µ–º—ã...")
    
    # –¢–µ—Å—Ç 1: –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç –±–µ–∑ FSRS
    try:
        answer1 = BatchAnswerItem(
            question_id=123,
            is_correct=True,
            timestamp=1640995200000
        )
        print("‚úÖ –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç: OK")
        print(f"   {answer1.dict()}")
    except Exception as e:
        print(f"‚ùå –û–±—ã—á–Ω—ã–π –æ—Ç–≤–µ—Ç: {e}")
    
    # –¢–µ—Å—Ç 2: FSRS –æ—Ç–≤–µ—Ç —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    try:
        answer2 = BatchAnswerItem(
            question_id=124,
            is_correct=True,
            timestamp=1640995200000,
            response_time=3500,  # 3.5 —Å–µ–∫—É–Ω–¥—ã
            difficulty_rating=3  # Good
        )
        print("‚úÖ FSRS –æ—Ç–≤–µ—Ç: OK")
        print(f"   {answer2.dict()}")
    except Exception as e:
        print(f"‚ùå FSRS –æ—Ç–≤–µ—Ç: {e}")
    
    # –¢–µ—Å—Ç 3: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π difficulty_rating
    try:
        answer3 = BatchAnswerItem(
            question_id=125,
            is_correct=False,
            difficulty_rating=5  # –ù–µ–≤–∞–ª–∏–¥–Ω–æ (–¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 1-4)
        )
        print("‚ùå –î–æ–ª–∂–Ω–∞ –±—ã–ª–∞ –±—ã—Ç—å –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏!")
    except ValidationError as e:
        print("‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è difficulty_rating: OK")
        print(f"   –û—à–∏–±–∫–∞: {e}")
    
    # –¢–µ—Å—Ç 4: Batch –∑–∞–ø—Ä–æ—Å
    try:
        batch = BatchAnswersSubmit(
            answers=[
                BatchAnswerItem(question_id=126, is_correct=True, response_time=2000, difficulty_rating=4),
                BatchAnswerItem(question_id=127, is_correct=False, response_time=5000, difficulty_rating=1),
                BatchAnswerItem(question_id=128, is_correct=True)  # –ë–µ–∑ FSRS –¥–∞–Ω–Ω—ã—Ö
            ]
        )
        print("‚úÖ Batch –∑–∞–ø—Ä–æ—Å: OK")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–≤–µ—Ç–æ–≤: {len(batch.answers)}")
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
        json_data = batch.json()
        print(f"   JSON —Ä–∞–∑–º–µ—Ä: {len(json_data)} —Å–∏–º–≤–æ–ª–æ–≤")
        
    except Exception as e:
        print(f"‚ùå Batch –∑–∞–ø—Ä–æ—Å: {e}")

def test_fsrs_rating_mappings():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–∞–ø–ø–∏–Ω–≥ FSRS —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
    print("\nüî¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º FSRS —Ä–µ–π—Ç–∏–Ω–≥–∏...")
    
    mappings = {
        1: "Again (–°–Ω–æ–≤–∞)",
        2: "Hard (–°–ª–æ–∂–Ω–æ)", 
        3: "Good (–•–æ—Ä–æ—à–æ)",
        4: "Easy (–õ–µ–≥–∫–æ)"
    }
    
    for rating, description in mappings.items():
        try:
            answer = BatchAnswerItem(
                question_id=100 + rating,
                is_correct=rating > 2,  # 3 –∏ 4 = –ø—Ä–∞–≤–∏–ª—å–Ω–æ, 1 –∏ 2 = –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ
                difficulty_rating=rating
            )
            print(f"‚úÖ –†–µ–π—Ç–∏–Ω–≥ {rating} ({description}): OK")
        except Exception as e:
            print(f"‚ùå –†–µ–π—Ç–∏–Ω–≥ {rating}: {e}")

def test_automatic_rating_logic():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥...")
    
    # –õ–æ–≥–∏–∫–∞ –∏–∑ frontend: –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç = 4 (Easy), –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π = 1 (Again)
    test_cases = [
        {"is_correct": True, "expected_rating": 4, "description": "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π ‚Üí Easy"},
        {"is_correct": False, "expected_rating": 1, "description": "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π ‚Üí Again"}
    ]
    
    for case in test_cases:
        auto_rating = 4 if case["is_correct"] else 1
        
        answer = BatchAnswerItem(
            question_id=200,
            is_correct=case["is_correct"],
            difficulty_rating=auto_rating
        )
        
        if auto_rating == case["expected_rating"]:
            print(f"‚úÖ {case['description']}: OK (—Ä–µ–π—Ç–∏–Ω–≥ {auto_rating})")
        else:
            print(f"‚ùå {case['description']}: –û–∂–∏–¥–∞–ª–∏ {case['expected_rating']}, –ø–æ–ª—É—á–∏–ª–∏ {auto_rating}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ FSRS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n")
    
    try:
        test_fsrs_schemas()
        test_fsrs_rating_mappings()
        test_automatic_rating_logic()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
        
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
