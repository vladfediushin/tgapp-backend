#!/usr/bin/env python3
"""
–¢–µ—Å—Ç FSRS API endpoints
"""
import sys
import os
import asyncio
import json
from datetime import datetime, timezone

# –î–æ–±–∞–≤–ª—è–µ–º backend –≤ –ø—É—Ç—å
sys.path.append('/Users/vladfediushin/MEGA/coding/tgapp_driving_final_v3/backend')

async def test_fsrs_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º FSRS API endpoints –±–µ–∑ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üîå –¢–µ—Å—Ç–∏—Ä—É–µ–º FSRS API –ª–æ–≥–∏–∫—É...")
    
    try:
        from app.routers import submit_answers
        from app.schemas import BatchAnswersSubmit, BatchAnswerItem
        from app.database import get_db
        from sqlalchemy.orm import Session
        
        print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã —É—Å–ø–µ—à–Ω—ã")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_data = BatchAnswersSubmit(
            answers=[
                BatchAnswerItem(
                    question_id=123,
                    is_correct=True,
                    timestamp=int(datetime.now(timezone.utc).timestamp() * 1000),
                    response_time=3500,  # 3.5 —Å–µ–∫—É–Ω–¥—ã
                    difficulty_rating=3  # Good
                ),
                BatchAnswerItem(
                    question_id=124,
                    is_correct=False,
                    timestamp=int(datetime.now(timezone.utc).timestamp() * 1000),
                    response_time=8000,  # 8 —Å–µ–∫—É–Ω–¥
                    difficulty_rating=1  # Again
                )
            ]
        )
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω—ã")
        print(f"   –û—Ç–≤–µ—Ç–æ–≤: {len(test_data.answers)}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
        json_data = test_data.model_dump_json()
        print(f"   JSON —Ä–∞–∑–º–µ—Ä: {len(json_data)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—é
        parsed_back = BatchAnswersSubmit.model_validate_json(json_data)
        print("‚úÖ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è/–¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º FSRS –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        fsrs_test_cases = [
            {"use_fsrs": True, "description": "–° FSRS"},
            {"use_fsrs": False, "description": "–ë–µ–∑ FSRS"}
        ]
        
        for case in fsrs_test_cases:
            print(f"\nüß™ –¢–µ—Å—Ç: {case['description']}")
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É –∏–∑ routers.py
            use_fsrs = case["use_fsrs"]
            
            for answer in test_data.answers:
                answer_dict = answer.model_dump()
                
                if use_fsrs and answer_dict.get("difficulty_rating") and answer_dict.get("response_time"):
                    print(f"   ‚úÖ –í–æ–ø—Ä–æ—Å {answer.question_id}: FSRS –∞–∫—Ç–∏–≤–µ–Ω")
                    print(f"      –°–ª–æ–∂–Ω–æ—Å—Ç—å: {answer.difficulty_rating}")
                    print(f"      –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: {answer.response_time}ms")
                else:
                    print(f"   üìù –í–æ–ø—Ä–æ—Å {answer.question_id}: –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º")
        
        print("\nüéØ API –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("   –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–∑ –¥—Ä—É–≥–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

def test_fsrs_database_fields():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è FSRS"""
    print("\nüíæ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        from app.models import UserProgress
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –∏–º–µ–µ—Ç FSRS –ø–æ–ª—è
        fsrs_fields = ['stability', 'difficulty', 'retrievability', 'state', 'reps', 'lapses']
        
        for field in fsrs_fields:
            if hasattr(UserProgress, field):
                print(f"‚úÖ –ü–æ–ª–µ {field}: –Ω–∞–π–¥–µ–Ω–æ")
            else:
                print(f"‚ùå –ü–æ–ª–µ {field}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥–µ–ª–µ–π: {e}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def test_fsrs_algorithm_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é FSRS –∞–ª–≥–æ—Ä–∏—Ç–º–∞"""
    print("\nüß† –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é FSRS –∞–ª–≥–æ—Ä–∏—Ç–º–∞...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ FSRS –∫–æ–¥–∞
        backend_path = '/Users/vladfediushin/MEGA/coding/tgapp_driving_final_v3/backend'
        
        # –ò—â–µ–º FSRS —Ñ–∞–π–ª—ã
        fsrs_files_to_check = [
            'app/services/fsrs_service.py',
            'app/crud/user_progress.py'
        ]
        
        for file_path in fsrs_files_to_check:
            full_path = os.path.join(backend_path, file_path)
            if os.path.exists(full_path):
                print(f"‚úÖ {file_path}: –Ω–∞–π–¥–µ–Ω")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
                with open(full_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if 'FSRS' in content or 'fsrs' in content:
                        print(f"   üìù –°–æ–¥–µ—Ä–∂–∏—Ç FSRS –∫–æ–¥")
                    else:
                        print(f"   ‚ö†Ô∏è  FSRS –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            else:
                print(f"‚ùå {file_path}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
        
        print("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ FSRS –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ FSRS API –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(test_fsrs_endpoints())
    test_fsrs_database_fields()
    test_fsrs_algorithm_integration()
    
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã API –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")
